<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="icapServer" elementType="Argument">
            <stringProp name="Argument.name">icapServer</stringProp>
            <stringProp name="Argument.value">${__P(p_url,$icap_server$)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="containerUrl" elementType="Argument">
            <stringProp name="Argument.name">containerUrl</stringProp>
            <stringProp name="Argument.value">http://mycloudstore/container/</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="outputPath" elementType="Argument">
            <stringProp name="Argument.name">outputPath</stringProp>
            <stringProp name="Argument.value">/usr/share/Test/output</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="s3bucketName" elementType="Argument">
            <stringProp name="Argument.name">s3bucketName</stringProp>
            <stringProp name="Argument.value">${__P(p_bucket,aws-testengine-s3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="inPath" elementType="Argument">
            <stringProp name="Argument.name">inPath</stringProp>
            <stringProp name="Argument.value">/usr/share/Test/input</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="influxHost" elementType="Argument">
            <stringProp name="Argument.name">influxHost</stringProp>
            <stringProp name="Argument.value">${__P(p_influxHost,$influxHost$)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="aws_access_key" elementType="Argument">
            <stringProp name="Argument.name">aws_access_key</stringProp>
            <stringProp name="Argument.value">${__P(p_aws_access_key,access_key)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="aws_secret_key" elementType="Argument">
            <stringProp name="Argument.name">aws_secret_key</stringProp>
            <stringProp name="Argument.value">${__P(p_aws_secret_key,secret)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="aws_host" elementType="Argument">
            <stringProp name="Argument.name">aws_host</stringProp>
            <stringProp name="Argument.value">${__P(p_aws_host,s3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="aws_service_name" elementType="Argument">
            <stringProp name="Argument.name">aws_service_name</stringProp>
            <stringProp name="Argument.value">${__P(p_aws_service_name,s3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="aws_region" elementType="Argument">
            <stringProp name="Argument.name">aws_region</stringProp>
            <stringProp name="Argument.value">${__P(p_aws_region,eu-west-1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="prefix" elementType="Argument">
            <stringProp name="Argument.name">prefix</stringProp>
            <stringProp name="Argument.value">${__P(p_prefix,$prefix$)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="filetype" elementType="Argument">
            <stringProp name="Argument.name">filetype</stringProp>
            <stringProp name="Argument.value">${__P(p_filetype,files)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="MINIO Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="MINIO_URL" elementType="Argument">
            <stringProp name="Argument.name">MINIO_URL</stringProp>
            <stringProp name="Argument.value">$minio_endpoint$</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MINIO_ACCESS_KEY" elementType="Argument">
            <stringProp name="Argument.name">MINIO_ACCESS_KEY</stringProp>
            <stringProp name="Argument.value">${__P(p_minio_access_key,$minio_access_key$)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MINIO_SECRET_KEY" elementType="Argument">
            <stringProp name="Argument.name">MINIO_SECRET_KEY</stringProp>
            <stringProp name="Argument.value">${__P(p_minio_secret_key,$minio_secret_key$)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MINIO_BUCKET" elementType="Argument">
            <stringProp name="Argument.name">MINIO_BUCKET</stringProp>
            <stringProp name="Argument.value">${__P(p_minio_bucket,$minio_input_bucket$)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MINIO_BUCKET_OUTPUT" elementType="Argument">
            <stringProp name="Argument.name">MINIO_BUCKET_OUTPUT</stringProp>
            <stringProp name="Argument.value">${__P(p_minio_bucket_output,$minio_output_bucket$)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(p_vuserCount,$number_of_threads$)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__P(p_rampup,20)}</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(p_duration,$duration_in_seconds$)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="FileList" enabled="true">
          <stringProp name="filename">/usr/share/data/files</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames">id,fileName,path,size,type,isMalicious,original_hash,rebuild_hash</stringProp>
          <boolProp name="ignoreFirstLine">true</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Generate UUID" enabled="true">
          <stringProp name="BeanShellSampler.query">

// String bumid1  = ${__UUID};

 vars.put(&quot;uid&quot;,&quot;${__UUID()}&quot;);
 log.info(&quot;UUID is&quot;+uuid)
</stringProp>
          <stringProp name="BeanShellSampler.filename"></stringProp>
          <stringProp name="BeanShellSampler.parameters"></stringProp>
          <boolProp name="BeanShellSampler.resetInterpreter">false</boolProp>
        </BeanShellSampler>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${type}_ICAP-MoveFile2inFolder" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="download - moving py dependency" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import io.minio.MinioClient;
import io.minio.ServerSideEncryption;
import io.minio.ServerSideEncryptionCustomerKey;
import io.minio.UploadObjectArgs;
import io.minio.errors.MinioException;
import io.minio.BucketExistsArgs;
import io.minio.MakeBucketArgs;
import io.minio.DownloadObjectArgs
import java.io.IOException;

String uuid=vars.get(&quot;uid&quot;);

log.info(&quot;Bucket is &quot; + &quot;${MINIO_BUCKET}&quot;);
log.info(&quot;Object is &quot; + &quot;${path}/${fileName}&quot;);

try {
      MinioClient minioClient =
          MinioClient.builder()
              .endpoint(&quot;${MINIO_URL}&quot;)
              .credentials(&quot;${MINIO_ACCESS_KEY}&quot;, &quot;${MINIO_SECRET_KEY}&quot;)
              .build();
	// Check if the bucket already exists.
	boolean isExist = minioClient.bucketExists(BucketExistsArgs.builder().bucket(&quot;${MINIO_BUCKET}&quot;).build());
	if(isExist) {
	        //System.out.println(&quot;Bucket already exists.&quot;);
	      } else {
	        minioClient.makeBucket(MakeBucketArgs.builder().bucket(&quot;${MINIO_BUCKET}&quot;).build());
	      }
	// Download file from the bucket
	//It will download object with specified name into location specified as filename
	inFileName=&quot;${inPath}/&quot;+ uuid +&quot;_${fileName}&quot;;
	minioClient.downloadObject(
	       DownloadObjectArgs.builder()
	                .bucket(&quot;${MINIO_BUCKET}&quot;)
	                .object(&quot;${path}/${fileName}&quot;)
	                .filename(inFileName)
	                .build());
	log.info(&quot;File is downloaded to in folder &quot;+inFileName);
     } catch (MinioException e) {
		 System.out.println(&quot;Error occurred: &quot; + e);
		}

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${type}_ICAP-Document-Process" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// ********
// Upload a file to ICAP server 
//
// Preconditions:
// https://github.com/filetrust/program-icap/wiki/Using-the-C-ICAP-Test-Client
// should be installed in same linux machine as jmeter
//
// ********

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

String uuid=vars.get(&quot;uid&quot;);
/*log.info(&quot;UUID is &quot;+uuid);
log.info(&quot;Coping files from s3 to localdisk&quot;);
String s3cp=&quot;aws s3 cp s3://&quot;+vars.get(&quot;s3bucketName&quot;)+&quot;/${path}/&quot;+&quot;${fileName}&quot;+&quot; &quot;+vars.get(&quot;path&quot;)+&quot;/&quot;+&quot;${fileName}&quot;;

// Create a process object and let this object execute the command
Process s3p = Runtime.getRuntime().exec(s3cp);
s3p.waitFor();
log.info(&quot;File copied to in. &quot;+s3cp);*/

log.info(Thread.currentThread().getName()+&quot;: &quot;+SampleLabel+&quot;: Document-Upload: &quot; + vars.get(&quot;icapServer&quot;));
String command1 = &quot;/usr/local/bin/c-icap-client -i &quot; + vars.get(&quot;icapServer&quot;)+&quot; -p 1344 -s gw_rebuild&quot;;    // for unix
String command2=&quot; -f ${inPath}/&quot; + uuid + &quot;_${fileName} -o ${outputPath}/&quot;+ uuid +&quot;_${fileName} -v&quot;;
String command=command1+command2;
// Print the generated status check command
//log.info(&quot;Command 1 is &quot;+command1);
//log.info(&quot;Command 2 is &quot;+command2);
log.info(&quot;The command is &quot;+command);

// Create a process object and let this object execute the icap client command
Process p = Runtime.getRuntime().exec(command);
p.waitFor();

log.info(&quot;Document Upload Execution complete.&quot;+ p.exitValue());


private static String getFileChecksum(MessageDigest digest, File file) throws IOException
{
	
    //Get file input stream for reading the file content
    FileInputStream fis = new FileInputStream(file);
     
    //Create byte array to read data in chunks
    byte[] byteArray = new byte[1024];
    int bytesCount = 0; 
      
    //Read file data and update in message digest
    while ((bytesCount = fis.read(byteArray)) != -1) {
        digest.update(byteArray, 0, bytesCount);
    };
     
    //close the stream; We don&apos;t need it now.
    fis.close();
     
    //Get the hash&apos;s bytes
    byte[] bytes = digest.digest();
     
    //This bytes[] has bytes in decimal format;
    //Convert it to hexadecimal format
   StringBuilder sb = new StringBuilder();
    for(int i=0; i&lt; bytes.length ;i++)
    {
        sb.append(Integer.toString((bytes[i] &amp; 0xff) + 0x100, 16).substring(1));
    }
  
    //return complete hash
     return sb.toString();
}
//checksum md5

//Create checksum for this file
//File inFile = new File(&quot;${inPath}/${fileName}&quot;);
//String in_checksum=&quot;in&quot;;
//Use MD5 algorithm
//MessageDigest in_Digest = MessageDigest.getInstance(&quot;SHA-256&quot;);
 //try {
//Get the checksum
 //in_checksum = getFileChecksum(in_Digest, inFile);
 
//see checksum
//log.info(&quot;In file hash is &quot;+in_checksum);
 //}
 //catch (Exception e) {

//log.info (&quot;Failed to check in file hash&quot;);
 //}

 
//Create checksum for this file
File outFile = new File(&quot;${outputPath}/&quot;+uuid+&quot;_${fileName}&quot;);
 
//Use MD5 algorithm
MessageDigest out_Digest = MessageDigest.getInstance(&quot;SHA-1&quot;);
String out_checksum=&quot;out&quot;;
 try {
//Get the checksum
 out_checksum = getFileChecksum(out_Digest, outFile);
 

 }
 catch (Exception e) {

log.info (&quot;Failed to check out file hash&quot;);

 }

//see checksum
log.info(&quot;Out file hash is &quot;+out_checksum);

// Read the output of the command and log it
BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
StringBuilder logCommandOutput = new StringBuilder();
//in.readLine();
//in.readLine();
//in.readLine();
SampleResult.setSuccessful(false);
String line;
String respCode;
log.info(&quot;rebuild hash is &quot;+&quot;${rebuild_hash}&quot;);

while( (line = in.readLine()) != null) {
  logCommandOutput.append(line);
  log.info(&quot;line is &quot;+line);

  if (line.contains(&quot;ICAP/1.0 200 OK&quot;)&amp;&amp;&quot;${rebuild_hash}&quot;.equals(out_checksum)) {
     SampleResult.setSuccessful(true);
     SampleResult.setResponseCode(&quot;200&quot;);
     log.info(&quot;My line is &quot;+line);
  }

  if (!&quot;${rebuild_hash}&quot;.equals(out_checksum)) {
  	SampleResult.setSuccessful(false);
     SampleResult.setResponseCode(&quot;555&quot;);
     log.info(&quot;Hash is mismatching &quot;+ &quot;Rebuild hash is &quot;+ &quot;${rebuild_hash}&quot;+&quot;.Out File Hash is &quot;+out_checksum);
  }
  
  if (line.contains(&quot;ICAP/1.0 204&quot;)) {
     SampleResult.setResponseCode(&quot;204&quot;);
     SampleResult.setSuccessful(true);
     SampleResult.setResponseMessage(&quot;No modifications needed&quot;);
     log.info(&quot;Response Code is 204&quot;);
     break;
  }
  if (line.contains(&quot;ICAP/1.0 500&quot;)) {
     SampleResult.setResponseCode(&quot;500&quot;);
     SampleResult.setResponseMessage(&quot;500 Internal server error&quot;);
     log.info(&quot;Response Code is 500&quot;);
     break;
  }

  if (line.contains(&quot;ICAP/1.0 503&quot;)) {
     SampleResult.setResponseCode(&quot;503&quot;);
     SampleResult.setResponseMessage(&quot;Service overloaded&quot;);
     log.info(&quot;Response Code is 503&quot;);
     break;
  }
  if (line.contains(&quot;ICAP/1.0 400&quot;)) {
     SampleResult.setResponseCode(&quot;400&quot;);
     SampleResult.setResponseMessage(&quot;400 Bad request.&quot;);
     log.info(&quot;Response Code is 400&quot;);
     break;
  }
  if (line.contains(&quot;ICAP/1.0 502&quot;)) {
     SampleResult.setResponseCode(&quot;502&quot;);
     SampleResult.setResponseMessage(&quot;502 Bad gateway.&quot;);
     log.info(&quot;Response Code is 502&quot;);
     break;
  }
  if (line.contains(&quot;ICAP/1.0 506&quot;)) {
     SampleResult.setResponseCode(&quot;506&quot;);
     SampleResult.setResponseMessage(&quot;506 Server too busy.r&quot;);
     log.info(&quot;Response Code is 506&quot;);
     break;
  }
  if (line.contains(&quot;ICAP/1.0 551&quot;)) {
     SampleResult.setResponseCode(&quot;551&quot;);
     SampleResult.setResponseMessage(&quot;551 Resource unavailable.&quot;);
     log.info(&quot;Response Code is 551&quot;);
     break;
  }
  if (line.contains(&quot;ICAP/1.0 403&quot;)) {
     SampleResult.setResponseCode(&quot;403&quot;);
     SampleResult.setResponseMessage(&quot;403 Forbidden&quot;);
     log.info(&quot;Response Code is 403&quot;);
     break;
  }
   if (line.contains(&quot;ICAP/1.0 404&quot;)) {
     SampleResult.setResponseCode(&quot;404&quot;);
     SampleResult.setResponseMessage(&quot;404 Service Not Found&quot;);
     log.info(&quot;Response Code is 404&quot;);
     break;
  }
    if (line.contains(&quot;ICAP/1.0 405&quot;)) {
     SampleResult.setResponseCode(&quot;405&quot;);
     SampleResult.setResponseMessage(&quot;405 Method Not Allowed&quot;);
     log.info(&quot;Response Code is 405&quot;);
     break;
  }
    if (line.contains(&quot;ICAP/1.0 408&quot;)) {
     SampleResult.setResponseCode(&quot;408&quot;);
     SampleResult.setResponseMessage(&quot;408 Request Timeout&quot;);
     log.info(&quot;Response Code is 408&quot;);
     break;
  }

   if (line.contains(&quot;Failed to connect to icap server&quot;)) {
     SampleResult.setResponseCode(&quot;522&quot;);
     SampleResult.setResponseMessage(&quot;522 Failed to connect to icap server&quot;);
     log.info(&quot;Response Code is 522&quot;);
     break;
  }
  if (line.contains(&quot;HTTP/1.0 403 Forbidden&quot;)) {
     SampleResult.setResponseCode(&quot;403&quot;);
     SampleResult.setSuccessful(false);
     SampleResult.setResponseMessage(&quot;403 Fordbidden&quot;);
     log.info(&quot;Response Code is 403. File is &quot;+ &quot;${fileName}&quot;);
     if (&quot;${rebuild_hash}&quot;.equals(&quot;NULL&quot;))
     SampleResult.setSuccessful(true);
     break;
  }
}

in.close();
log.info(&quot;Upload Output: &quot; + logCommandOutput.toString());</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="thinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${__Random(2000,10000,)}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${type}_ICAP-Copy to minio Out" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="upload - moving py dependecy" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import io.minio.MinioClient;
import io.minio.ServerSideEncryption;
import io.minio.ServerSideEncryptionCustomerKey;
import io.minio.UploadObjectArgs;
import io.minio.errors.MinioException;
import io.minio.BucketExistsArgs;
import io.minio.MakeBucketArgs;
import org.xmlpull.v1.XmlPullParserException;
import java.io.IOException;

String uuid=vars.get(&quot;uid&quot;);

try {
      MinioClient minioClient =
          MinioClient.builder()
              .endpoint(&quot;${MINIO_URL}&quot;)
              .credentials(&quot;${MINIO_ACCESS_KEY}&quot;, &quot;${MINIO_SECRET_KEY}&quot;)
              .build();
	// Check if the bucket already exists.
	boolean isExist = minioClient.bucketExists(BucketExistsArgs.builder().bucket(&quot;${MINIO_BUCKET_OUTPUT}&quot;).build());
	if(isExist) {
	        //System.out.println(&quot;Bucket already exists.&quot;);
	      } else {
	        minioClient.makeBucket(MakeBucketArgs.builder().bucket(&quot;${MINIO_BUCKET_OUTPUT}&quot;).build());
	}
	
	// Upload file to the bucket with putObject
	String name = uuid + &quot;_${fileName}&quot;;
	String filePath = &quot;${outputPath}/&quot; + name;
	
	vars.put(&quot;filePath&quot;, filePath);
	log.info(&quot;Minio bucket is &quot;+&quot;${MINIO_BUCKET_OUTPUT}&quot;);
	log.info(&quot;file name is &quot;+name);
	log.info(&quot;file path is &quot;+filePath);

	minioClient.putObject(&quot;${MINIO_BUCKET_OUTPUT}&quot;,&quot;icap-processed/&quot; + name,filePath,null);
    } catch(MinioException e) {
      System.out.println(&quot;Error occurred: &quot; + e);
    }</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="thinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${__Random(2000,10000,)}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="${type}_ICAP-CleanOutFile" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">
String uuid=vars.get(&quot;uid&quot;);
log.info(&quot;UUID is &quot;+uuid);


log.info(&quot;Cleaning file from out folder &quot;);

//clean in folder
String removeInFile=&quot;rm -Rf &quot;+&quot;${inPath}&quot;+&quot;/&quot;+uuid+&quot;_${fileName}&quot;;
s3p_out = Runtime.getRuntime().exec(removeInFile);
s3p_out.waitFor();

log.info(&quot;${inPath}&quot;+&quot;/&quot;+uuid+&quot;_${fileName}&quot;+&quot; file deleted from the input folder &quot;);

//clean out folder
String removeOutFile=&quot;rm -Rf &quot;+&quot;${outputPath}&quot;+&quot;/&quot;+uuid+&quot;_${fileName}&quot;;
s3p_out = Runtime.getRuntime().exec(removeOutFile);
s3p_out.waitFor();

log.info(&quot;${outputPath}&quot;+&quot;/&quot;+uuid+&quot;_${fileName}&quot;+&quot; file deleted from the output folder &quot;);
</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">true</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Server Status Check" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ICAP-Check-Server-Status" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// ********
// Checking the ICAP Server is running
//
// Preconditions:
// https://github.com/filetrust/program-icap/wiki/Using-the-C-ICAP-Test-Client
// should be installed in same linux machine as jmeter
//
// ********

log.info(Thread.currentThread().getName()+&quot;: &quot;+SampleLabel+&quot;: Check-server-status: &quot; + vars.get(&quot;icapServer&quot;));

String command = &quot;/usr/local/bin/c-icap-client -i &quot; + vars.get(&quot;icapServer&quot;);    // for unix

// Print the generated status check command
log.info(command);

// Create a process object and let this object execute the command
Process p = Runtime.getRuntime().exec(command);
p.waitFor();

log.info(&quot;Server Status check complete.&quot;);

// Read the output of the command and log it
BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
StringBuilder logCommandOutput = new StringBuilder();
String line;
 SampleResult.setSuccessful(false);
while( (line = in.readLine()) != null) {
  logCommandOutput.append(line);
  if (line.contains(&quot;OK&quot;)) {
     SampleResult.setSuccessful(true);
     break;
  }
}
in.close();
log.info(&quot;Server Status check Output: &quot; + logCommandOutput.toString());</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="thinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${__Random(2000,5000,)}</stringProp>
        </TestAction>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="ICAP-Check-Resource-Status" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">// ********
// Checking the ICAP Resource is running
//
// Preconditions:
// https://github.com/filetrust/program-icap/wiki/Using-the-C-ICAP-Test-Client
// should be installed in same linux machine as jmeter
//
// ********

log.info(Thread.currentThread().getName()+&quot;: &quot;+SampleLabel+&quot;: Check-Resource-status: &quot; + vars.get(&quot;icapServer&quot;));

String command = &quot;/usr/local/bin/c-icap-client -i &quot; + vars.get(&quot;icapServer&quot;)+&quot; -p 1344 -s gw_rebuild&quot;;    // for unix

// Print the generated status check command
log.info(command);

// Create a process object and let this object execute the command
Process p = Runtime.getRuntime().exec(command);
p.waitFor();

log.info(&quot;Resource Status check complete.&quot;);

// Read the output of the command and log it
BufferedReader in = new BufferedReader(new InputStreamReader(p.getErrorStream()));
StringBuilder logCommandOutput = new StringBuilder();
String line;
SampleResult.setSuccessful(false);
while( (line = in.readLine()) != null) {
  logCommandOutput.append(line);
  if (line.contains(&quot;OK&quot;)) {
     SampleResult.setSuccessful(true);
     break;
  }
}
in.close();
log.info(&quot;Resource Status check Output: &quot; + logCommandOutput.toString());</stringProp>
            <stringProp name="scriptLanguage">java</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="thinkTime" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">${__Random(2000,5000,)}</stringProp>
        </TestAction>
        <hashTree/>
      </hashTree>
      <BackendListener guiclass="BackendListenerGui" testclass="BackendListener" testname="Backend Listener" enabled="true">
        <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="influxdbMetricsSender" elementType="Argument">
              <stringProp name="Argument.name">influxdbMetricsSender</stringProp>
              <stringProp name="Argument.value">org.apache.jmeter.visualizers.backend.influxdb.HttpMetricsSender</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="influxdbUrl" elementType="Argument">
              <stringProp name="Argument.name">influxdbUrl</stringProp>
              <stringProp name="Argument.value">$influxdb_url$/write?db=jmeter</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="application" elementType="Argument">
              <stringProp name="Argument.name">application</stringProp>
              <stringProp name="Argument.value">application name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="measurement" elementType="Argument">
              <stringProp name="Argument.name">measurement</stringProp>
              <stringProp name="Argument.value">${prefix}_jmetericap</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="summaryOnly" elementType="Argument">
              <stringProp name="Argument.name">summaryOnly</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="samplersRegex" elementType="Argument">
              <stringProp name="Argument.name">samplersRegex</stringProp>
              <stringProp name="Argument.value">.*ICAP-Document-Process</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="percentiles" elementType="Argument">
              <stringProp name="Argument.name">percentiles</stringProp>
              <stringProp name="Argument.value">90;95;99</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="testTitle" elementType="Argument">
              <stringProp name="Argument.name">testTitle</stringProp>
              <stringProp name="Argument.value">Test name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="eventTags" elementType="Argument">
              <stringProp name="Argument.name">eventTags</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </elementProp>
        <stringProp name="classname">org.apache.jmeter.visualizers.backend.influxdb.InfluxdbBackendListenerClient</stringProp>
      </BackendListener>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Get ICAP server status" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">startnextloop</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${__P(p_duration,600)}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Server Status" enabled="true">
          <stringProp name="scriptLanguage">java</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">/* By deafault, InfluxDB get datetime of host system, Un-comment if you want to insert daytime manual
	   	import java.time.Instant;
		import java.time.LocalDateTime;
		import java.time.ZoneId;
		import java.time.ZonedDateTime;
*/
	   //String my_var = vars.get(&quot;ICAPServerAddr&quot;);
        String command =&quot;/usr/local/bin/c-icap-client -s info?view=text -i &quot; +vars.get(&quot;icapServer&quot;)+&quot; -req any&quot;;
	   // Print the generated status check command
		log.info(command);

		// Create a process object and let this object execute the command
		Process p = Runtime.getRuntime().exec(command);
		p.waitFor();
/*By deafault, InfluxDB get datetime of host system, Un-comment if you want to insert daytime manual
	   LocalDateTime now = LocalDateTime.now();
	   LocalDateTime localDateTime = LocalDateTime.now();
        ZonedDateTime zdt = ZonedDateTime.of(localDateTime, ZoneId.systemDefault());
 */

       //Get output of execution command p
        BufferedReader br=new BufferedReader(new InputStreamReader(p.getInputStream()));   
        StringBuffer msrbuffer = new StringBuffer();
        String line=&quot;&quot;;
        //Define list measurements
        prefix=region=vars.get(&quot;prefix&quot;);
        String runningServers=prefix+&quot; Running Servers Statistics&quot;;
        String generalStats=prefix+&quot; General Statistics&quot;;
        String serviceStats=prefix+&quot; Service info Statistics&quot;;
        String serviceEchoStats=prefix+&quot; Service echo Statistics&quot;;
        String servicegw_rebuildStats=prefix+&quot; Service gw_rebuild Statistics&quot;;
      
       String[] list_measurements= {runningServers,generalStats,serviceStats,serviceEchoStats,servicegw_rebuildStats,&quot;EOF&quot;};// String[] list_measurements= {&quot;Running Servers Statistics&quot;,&quot;General Statistics&quot;,&quot;Service info Statistics&quot;,&quot;Service echo Statistics&quot;,&quot;Service gw_rebuild Statistics&quot;,&quot;EOF&quot;};

        //Convert text output data from command p to influxDB line syntax format
 	   for(int i=0;i&lt; list_measurements.length -1;i++) {
 	   	
	     line = list_measurements[i].replaceAll(&quot; &quot;,&quot;_&quot;);
	     msrbuffer.append(line+&quot; &quot;);
	     while( (line = br.readLine()) != null ) {
	     	
	         if (!(line.contentEquals(list_measurements[i+1]))){
	            	//	System.out.println(line);
	         line = line.replaceAll(&quot;=&quot;,&quot;&quot;);
	         line = line.replaceAll(&quot;: | : &quot;, &quot;=&quot;);
	         line = line.replaceAll(&quot; &quot;,&quot;_&quot;);
	         line = line.replaceAll(&quot;=(.+_.*+)&quot;,&quot;=\&quot;$1\&quot;&quot;);
	          
	            	//line =line.replaceAll(&quot;\n&quot;, &quot;&quot;);
	         if ((line.length()&gt;0) &amp;&amp; (line.contains(&quot;=&quot;))) {
	            msrbuffer.append(line+&quot;,&quot;);
	         		} 
	         } else {break;}
	            }

	            msrbuffer.deleteCharAt(msrbuffer.length() -1);
/*By deafault, InfluxDB get datetime of host system, Un-comment if you want to insert daytime manual
	            msrbuffer.append(&quot; &quot;+zdt.toInstant().toEpochMilli());

*/
	            if ((line = br.readLine()) != null) msrbuffer.append(&quot;\n&quot;);

	        }

        br.close();    
       // fr.close();   
        log.info(msrbuffer.toString());
        //Add influxDB format to variable data
        vars.put(&quot;data&quot;,msrbuffer.toString());</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">100</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Post to Influx" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${data}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${influxHost}</stringProp>
          <stringProp name="HTTPSampler.port">8086</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/write?db=icapserver</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <TestAction guiclass="TestActionGui" testclass="TestAction" testname="Think Time" enabled="true">
          <intProp name="ActionProcessor.action">1</intProp>
          <intProp name="ActionProcessor.target">0</intProp>
          <stringProp name="ActionProcessor.duration">1000</stringProp>
        </TestAction>
        <hashTree>
          <UniformRandomTimer guiclass="UniformRandomTimerGui" testclass="UniformRandomTimer" testname="Pause" enabled="true">
            <stringProp name="ConstantTimer.delay">1000</stringProp>
            <stringProp name="RandomTimer.range">100</stringProp>
          </UniformRandomTimer>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="false">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">/home/son/icapserver.jtl</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
